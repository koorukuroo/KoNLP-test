score <- which(colnames(heptathlon) == "score")
plot(heptathlon[,-score])
heptathlon_pca <- prcomp(heptathlon[, -score], scale = TRUE)
print(heptathlon_pca)
round(cor(heptathlon[,-score]), 2)
heptathlon_pca <- prcomp(heptathlon[, -score], scale = TRUE)
print(heptathlon_pca)
summary(heptathlon_pca)
(a1 <- heptathlon_pca$rotation[,1])
(a2 <- heptathlon_pca$rotation[,2])
plot(heptathlon_pca)
center <- heptathlon_pca$center
scale <- heptathlon_pca$scale
hm <- as.matrix(heptathlon[,-score])
drop(scale(hm, center = center, scale = scale) %*% heptathlon_pca$rotation[,1])
predict(heptathlon_pca)[,1]
biplot(heptathlon_pca, col = c("gray", "black"))
?Hmisc
library(Hmisc)   # install : install.packages(“Hmisc”)
?Hmisc
??Hmisc
library(ggplot2)	# install : install.packages(“ggplot2”)
data(airquality)
head(airquality)
aq<-na.omit(airquality)
head(aq)
g <- ggplot(aq, aes(Solar.R, Wind))
g + geom_point() + geom_smooth(method="lm")
g <- ggplot(aq, aes(Solar.R, Temp))
g + geom_point() + geom_smooth(method="lm")
g <- ggplot(aq, aes(Ozone,Solar.R))
g + geom_point() + geom_smooth(method="lm")
g <- ggplot(aq, aes(Ozone,Temp))
g + geom_point() + geom_smooth(method="lm")
cor(aq$Ozone, aq$Temp)
cor(aq[,c(1:4)])  # mtcars
cov(aq[,c(1:4)])
cor(as.matrix(aq[,c(1:4)]),method="pearson")
park<-c("DG","IC","BS","JS")
Y11 <- c(99, 108, 125, 144)
Y12 <- c(72, 107, 75, 104)
Y13 <- c(93, 96, 62, 91)
data1 <- data.frame(Y11, Y12, Y14)
data1 <- data.frame(Y11, Y12, Y13)
rownames(data1)<-park
rcorr(as.matrix(data1), type="spearman")
data1
park<-c("DG","MD","IC","BS","JS")
Y11 <- c(99, 74, 108, 125, 144)
Y12 <- c(72, 83, 107, 75, 104)
Y13 <- c(93, 95, 96, 62, 91)
data1 <- data.frame(Y11, Y12, Y13)
rownames(data1)<-park
rcorr(as.matrix(data1), type="spearman")
Player<-c("YJH","JJH","SJS","LSY","PKW","SJM","PJH")
BT <- c(8807, 7374, 5958, 5005, 6794, 7139, 6829)
HR <- c(351, 340, 328, 324, 313, 300, 294)
SO <- c(910, 1354, 1073, 827, 1588, 1350, 1086)
data1 <- data.frame(BT, HR, SO)
rownames(data1)<-Player
rcorr(as.matrix(data1), type="spearman")
Player<-c("LSY","CHW","KHS","BBH","KJH","NJW","CJ")
BT <- c(443,511,434,450,450,435,434)
H2 <- c(24,28,23,17,21,18,18)
HR <- c(13,29,16,37,22,21,28)
BB <- c(30,47,62,92,68,62,64)
SO <- c(94,91,71,96,109,70,109)
data1 <- data.frame(BT,H2,HR,BB,SO)
rownames(data1)<-Player
rcorr(as.matrix(data1), type="spearman")
cor(data1, method="kendall")
data(watervoles, package = "HSAUR")
data(watervoles, package = "HSAUR")
? watervoles
library(HSAUR)
? watervoles
voles_mds <- cmdscale(watervoles, k = 13, eig = TRUE)
voles_mds$eig
voles_mds <- cmdscale(watervoles, k = 13)
voles_mds$eig
voles_mds <- cmdscale(watervoles)
voles_mds
voles_mds <- cmdscale(watervoles, eig = TRUE)
voles_mds
Dim1 <- voles_mds [,1]
Dim2 <- voles_mds [,2]
data(eurodist)
euro.mds <- cmdscale(eurodist)
euro.mds
eur.mds <- cmdscale(eurodist, eig = TRUE)
eur.mds
Dim1 <- euro.mds [,1]
Dim2 <- euro.mds [,2]
voles_mds <- cmdscale(watervoles)
voles_mds
voles_mds <- cmdscale(watervoles, eig = TRUE)
voles_mds
Dim1 <- voles_mds [,1]
Dim2 <- voles_mds [,2]
vole_mds <- cmdscale(watervoles, eig = TRUE)
vole_mds
voles_mds <- cmdscale(watervoles)
voles_mds
Dim1 <- voles_mds [,1]
Dim2 <- voles_mds [,2]
plot(Dim1, Dim2, type="n", xlab="", ylab="", main="cmdscale(watervoles)")
plot(Dim1, Dim2, type="n", xlab="", ylab="", main="cmdscale(watervoles)", type = "n")
plot(Dim1, Dim2, type="n", xlab="", ylab="", main="cmdscale(watervoles)")
segments(-1500, -0, 1500, 0, lty="dotted")
segments(0, -1500, 0, 1500, lty="dotted")
segments(-0.3, -0, 0.3, 0, lty="dotted")
plot(Dim1, Dim2, type="n", xlab="", ylab="", main="cmdscale(watervoles)")
segments(-0.3, -0, 0.3, 0, lty="dotted")
segments(0, -1, 0, 1, lty="dotted")
text(Dim1, Dim2, rownames(euro.mds), cex=0.8)
plot(Dim1, Dim2, type="n", xlab="",xlim=c(-0.5,0.5), ylab="", main="cmdscale(watervoles)")
plot(Dim1, Dim2, type="n", xlab="",xlim=c(-0.5,0.5), ylab="",ylim=c(-0.5,0.5), main="cmdscale(watervoles)")
segments(-1, -0, 1, 0, lty="dotted")
segments(0, -1, 0, 1, lty="dotted")
text(Dim1, Dim2, rownames(euro.mds), cex=0.8)
plot(Dim1, Dim2, type="n", xlab="",xlim=range(x)*1.2, ylab="",ylim=range(y)*1.2, main="cmdscale(watervoles)")
plot(Dim1, Dim2, type="n", xlab="",xlim=range(Dim1)*1.2, ylab="",ylim=range(Dim2)*1.2, main="cmdscale(watervoles)")
segments(-1, -0, 1, 0, lty="dotted")
segments(0, -1, 0, 1, lty="dotted")
text(Dim1, Dim2, rownames(euro.mds), cex=0.8)
plot(Dim1, Dim2, type="n", xlab="",xlim=range(Dim1)*1.2, ylab="",ylim=range(Dim2)*1.2, main="cmdscale(watervoles)")
segments(-1, -0, 1, 0, lty="dotted")
segments(0, -1, 0, 1, lty="dotted")
text(Dim1, Dim2, rownames(voles_mds), cex=0.8)
plot(Dim1, Dim2, type="n", xlab="",xlim=range(Dim1)*1.2, ylab="",ylim=range(Dim2)*1.2, main="cmdscale(watervoles)")
segments(-1, -0, 1, 0, lty="dotted")
segments(0, -1, 0, 1, lty="dotted")
text(Dim1, Dim2, rownames(voles_mds), cex=0.8, col="red")
data(cars)
plot(cars$speed, cars$dist)
cor.test(cars$speed, cars$dist)
m <- lm(dist~speed, data=cars)
summary(m)
par(mfrow=c(2,2))
plot(m)
par(mfrow=c(1,1))
plot(cars$speed, cars$dist) # visualize regession model
abline(coef(m))
plot(cars)
head(cars)
data(cars)
head(cars)
plot(cars)
data(iris)
head(iris)
plot(iris[,-5])
dnorm(0, mean=0, sd=1)
?dnorm
dnorm(0, mean=0, sd=1)
dnorm(0)
x=seq(-4,4,length=200)
y=1/sqrt(2*pi)*exp(-x^2/2)
plot(x,y,type="l",lwd=2,col="red")```
plot(x,y,type="l",lwd=2,col="red")
plot(density(rnorm(10000,0,1)))
plot(density(rnorm(100000,0,1)))
head(syrvey)
head(survey)
s.tab<-xtabs(~Sex+Exer,data=survey) # 분할표
library(sampling)
head(survey)
s.tab<-xtabs(~Sex+Exer,data=survey) # 분할표
library(doBy)
s.tab<-xtabs(~Sex+Exer,data=survey) # 분할표
head(survey)
?xtabs
head(s.tab)
str(survey)
str(s.tab)
s.tab$Sex
str(survey)
?survey
s.tab
data(cars)
plot(cars$speed, cars$dist) # visualize regession model
abline(coef(m))
abline(m)
plot(cars$speed, cars$dist) # visualize regession model
abline(m)
library(MASS)
data(survey)
# frequency table
table(survey$Smoke)
# pie chart
smoke<-table(survey$Smoke)
pie(smoke)
#bar chart
barplot(smoke)
# contingency table
table(survey$Sex,survey$Smoke)
# (d) 양적 자료 요약 기법 사례
data(mtcars)
# histogram
hist(mtcars$mpg)
#stem and leaf
stem(mtcars$hp)
#line graph
library(ggplot2)
ggplot(BOD, aes(x=BOD$Time, y=BOD$demand)) + geom_line()
#scatter plot
ggplot(mtcars,aes(x=mtcars$hp, y=mtcars$wt)) + geom_point()
## (5) 자료의 요약: 중심위치
#상자도표 사례
boxplot(mtcars$disp, mtcars$hp)
## (6) 자료의 요약 사례
data(iris)
head(iris)
summary(iris)
mean(iris$Petal.Width)
median(iris$Petal.Width)
sd(iris$Petal.Width)    # standard deviation
var(iris$Petal.Width)
quantile(iris$Petal.Width, 1/4)   # 1st quadrant
quantile(iris$Petal.Width, 3/4)   # 3rd quadrant
max(iris$Petal.Width)
min(iris$Petal.Width)
###########################
# 2. Correlation Analysis #
###########################
## (5) 상관분석의 사례
library(Hmisc)   # install : install.packages(“Hmisc”)
library(ggplot2)  # install : install.packages(“ggplot2”)
data(airquality)
aq<-na.omit(airquality)
head(aq)
g <- ggplot(aq, aes(Ozone,Temp))
g + geom_point() + geom_smooth(method="lm")
# (a) cor(): 두변수
cor(aq$Ozone, aq$Temp)
# (b) cor(): dataset에 포함된 모든 변수
cor(aq[,c(1:4)])  # mtcars
# (c) cov()
cov(aq[,c(1:4)])
# (d) 피어슨상관분석
cor(as.matrix(aq[,c(1:4)]),method="pearson")
# (e) 스피어만 서열척도 예제(2013년 프로야구 선수 기록 발췌)
Player<-c("LSY","CHW","KHS","BBH","KJH","NJW","CJ")
BT <- c(443,511,434,450,450,435,434)
H2 <- c(24,28,23,17,21,18,18)
HR <- c(13,29,16,37,22,21,28)
BB <- c(30,47,62,92,68,62,64)
SO <- c(94,91,71,96,109,70,109)
data1 <- data.frame(BT,H2,HR,BB,SO)
rownames(data1)<-Player
rcorr(as.matrix(data1), type="spearman")
# (f) 켄달  예제
cor(data1, method="kendall")
####################
# 3. 회귀분석 개념 #
####################
## (8) 단순회귀분석 사례
# regression analysis
data(cars)
# scatter plot
plot(cars$speed, cars$dist)
# correlation analysis
cor.test(cars$speed, cars$dist)
# 회귀분석 실시
m <- lm(dist~speed, data=cars)
summary(m)
# test
par(mfrow=c(2,2))
plot(m)
par(mfrow=c(1,1))
plot(cars$speed, cars$dist) # visualize regession model
abline(coef(m))
######################
# 4. 회귀분석의 종류 #
######################
## (5) 다중회귀분석 사례
# multiple linear Regression
data(iris)
# scatter plot matrix
plot(iris[,1:4])
# correlation analysis
cor(iris[,1:4])
rs <- lm( Sepal.Length~Sepal.Width + Petal.Length + Petal.Width ,data=iris)
summary(rs)
par(mfrow=c(2,2))
plot(rs)
par(mfrow=c(1,1))
############################
# 5. 최적회귀방정식의 선택 #
############################
## (4) 모델선택 사례
data(mtcars)
# forward selection
step(lm(disp~1,data=mtcars), direction="forward", scope=(~mpg+cyl+hp+drat+wt))
# backward selection
step(lm(disp~mpg+cyl+hp+drat+wt,data=mtcars), direction="backward")
# both
step(lm(disp~mpg+cyl+hp+drat+wt,data=mtcars), direction="both")
# 03. 시계열 분석
##################
# 2. 시계열 모형 #
##################
## (5) R을 이용한 시계열 분석 사례
# (a) Fitting an AR model
# data load
data(lynx)
head(lynx)
# data 탐색
ts.plot(lynx)
# acf
acf(lynx)
# log transformation
ts.plot(log(lynx))
acf(log(lynx))
# pacf
acf(log(lynx),type="partial")
# AR model 생성
llynx.ar <- ar.yw(log(lynx))
# 결과 확인
names(llynx.ar)
llynx.ar$order.max
# 모델의 차수를 결정
ts.plot(llynx.ar$aic, main="AIC for Log(Lynx)")
llynx.ar$order
llynx.ar$ar
# Visualization
ts.plot(log(lynx) - llynx.ar$resid)
lines(log(lynx), col=2)
# (b) Fitting an ARIMA model in R
# data load
library(fpp)
data(elecequip)
# data 탐색
eeadj <- seasadj(stl(elecequip, s.window="periodic"))
plot(eeadj)
# 모델 선택
tsdisplay(diff(eeadj),main="")
fit_310 <- Arima(eeadj, order=c(3,1,0))
fit_410 <- Arima(eeadj, order=c(4,1,0))
fit_210 <- Arima(eeadj, order=c(2,1,0))
fit_311 <- Arima(eeadj, order=c(3,1,1))
fit_310$aic;fit_410$aic;fit_210$aic;fit_311$aic;
# 잔차 확인
Acf(residuals(fit_311))
Box.test(residuals(fit_311), lag=24, fitdf=4, type="Ljung")
# 모델을 이용한 예측
plot(forecast(fit_311))
# (c) auto.arima와 비교
# auto.arima가 위의 과정과 같은 결과를 얻는 것을 확인
library(forecast)
fit_eeadj<-auto.arima(eeadj)
plot(forecast(fit_eeadj))
summary(fit_eeadj)
summary(fit_311)
# AR Model의 data lynx를 auto.arima에 적용
fit_lynx<-auto.arima(lynx)
plot(lynx-fit_lynx$residuals)
lines(lynx, col=2)
summary(fit_lynx)
summary()
# (d) 분해시계열(decompose)
# data load
library(zoo)
kospi<-read.csv("kospi.csv")
str(kospi)
# time series 생성
kospi_ts<-ts(kospi$close,frequency=250)
kospi_decomp<-decompose(kospi_ts)
plot(kospi_decomp)
str(kospi_decomp)
#===================#
# 04. 다차원 척도법 #
#===================#
##################
# 3. R 분석 사례 #
##################
## (1) 전통적 다차원척도법
# (a) 사례1. watervoles
# Load the 'watevoles' data.
data(watervoles, package = "HSAUR")
watervoles
# cmdscale 함수 적용
voles_mds <- cmdscale(watervoles)
voles_mds
# cmdscale 함수 적용(eig option)
vole_mds <- cmdscale(watervoles, eig = TRUE)
vole_mds
# Assign names (dimension numbers) to the result vectors.
Dim1 <- voles_mds [,1]
Dim2 <- voles_mds [,2]
# Visualization
plot(Dim1, Dim2, type="n", xlab="",xlim=range(Dim1)*1.2, ylab="",ylim=range(Dim2)*1.2, main="cmdscale(watervoles)")
segments(-1, -0, 1, 0, lty="dotted")
segments(0, -1, 0, 1, lty="dotted")
text(Dim1, Dim2, rownames(voles_mds), cex=0.8)
# Visualization with different markers and color.
plot(Dim1, Dim2, type="n", xlab="",xlim=range(Dim1)*1.2, ylab="",ylim=range(Dim2)*1.2, main="cmdscale(watervoles)")
segments(-1, -0, 1, 0, lty="dotted")
segments(0, -1, 0, 1, lty="dotted")
text(Dim1, Dim2, rownames(voles_mds), cex=0.8, col="red")
#===================#
# 04. 다차원 척도법 #
#===================#
##################
# 3. R 분석 사례 #
##################
## (1) 전통적 다차원척도법
# (a) 사례1. watervoles
# Load the 'watevoles' data.
data(watervoles, package = "HSAUR")
watervoles
# cmdscale 함수 적용
voles_mds <- cmdscale(watervoles)
voles_mds
# cmdscale 함수 적용(eig option)
vole_mds <- cmdscale(watervoles, eig = TRUE)
vole_mds
# Assign names (dimension numbers) to the result vectors.
Dim1 <- voles_mds [,1]
Dim2 <- voles_mds [,2]
# Visualization
plot(Dim1, Dim2, type="n", xlab="",xlim=range(Dim1)*1.2, ylab="",ylim=range(Dim2)*1.2, main="cmdscale(watervoles)")
segments(-1, -0, 1, 0, lty="dotted")
segments(0, -1, 0, 1, lty="dotted")
text(Dim1, Dim2, rownames(voles_mds), cex=0.8)
# Visualization with different markers and color.
plot(Dim1, Dim2, type="n", xlab="",xlim=range(Dim1)*1.2, ylab="",ylim=range(Dim2)*1.2, main="cmdscale(watervoles)")
segments(-1, -0, 1, 0, lty="dotted")
segments(0, -1, 0, 1, lty="dotted")
text(Dim1, Dim2, rownames(voles_mds), cex=0.8, col="red")
# (b) 사례2. 친족
# data load
library(foreign)
kinship.1 <- read.spss("http://www.unt.edu/rss/class/Jon/R_SC/Module9/MDS/kinship_dat.sav", use.value.labels=TRUE, max.value.labels=Inf, to.data.frame=TRUE)
kinship.1
# 'sourceid' 변수 제외
kinship.2 <- kinship.1 [1:15, 1:15]
kinship.2
# distance matrix 형태로 변환
kin.dist <- dist(kinship.2)
kin.dist
# 'cmdscale' 함수 적용
mds2 <- cmdscale(kin.dist)
mds2     # Returns the 2 dimensional vector values.
# 3차원 결과 도출 option 적용
mds3 <- cmdscale(kin.dist, k = 3)
mds3     # Returns the 3 dimensional vector values.
# 2차원 결과 시각화
plot(mds2)
Dim1 <- mds2[,1]
Dim2 <- mds2[,2]
plot(Dim1, Dim2, type="n", xlab="", ylab="", main="cmdscale(kin.dist)")
segments(-1500, -0, 1500, 0, lty="dotted")
segments(0, -1500, 0, 1500, lty="dotted")
text(Dim1, Dim2, colnames(kinship.2), cex=0.8, col="red")
# 3차원 결과 시각화
library(scatterplot3d)
scatterplot3d(mds3, color="dark blue", pch=1, main="Multidimensional Scaling 3-D Plot", sub="Three Dimensional Solution", grid=TRUE, box=TRUE)
mds3
## (2) 비계량적 다차원척도법(NonMetric MDS)
# data load
library(MASS)
data(swiss)
summary(swiss)
nrow(swiss)
# distance matrix로 변환
swiss.dist <- dist(swiss)
# isoMDS 함수 적용
swiss.mds <- isoMDS(swiss.dist)
swiss.mds
# 결과만 출력
swiss.mds$points
summary(swiss.mds$points)
# 시각화(기본)
plot(swiss.mds$points, type = "n")
text(swiss.mds$points, labels = as.character(1:nrow(swiss)))
# 시각화(segment와 text 포함)
plot(swiss.mds$points, type = "n")
segments(-75, -0, 55, 0, lty="dotted")
segments(0, -75, 0, 35, lty="dotted")
text(swiss.mds$points, labels = row.names(swiss), col = "red")
library(HSAUR)
data(heptathlon)
head(heptathlon)
heptathlon$hurdles <- max(heptathlon$hurdles) - heptathlon$hurdles
heptathlon$run200m <- max(heptathlon$run200m) - heptathlon$run200m
heptathlon$run800m <- max(heptathlon$run800m) - heptathlon$run800m
# (b) 산점도 확인
score <- which(colnames(heptathlon) == "score")
plot(heptathlon[,-score])
heptathlon_pca <- prcomp(heptathlon[, -score], scale = TRUE)
print(heptathlon_pca)
# (c) 상관계수 확인
round(cor(heptathlon[,-score]), 2)
# (d) prcomp 함수 적용
heptathlon_pca <- prcomp(heptathlon[, -score], scale = TRUE)
print(heptathlon_pca)
summary(heptathlon_pca)
(a1 <- heptathlon_pca$rotation[,1])
(a2 <- heptathlon_pca$rotation[,2])
cor(heptathlon$score,heptathlon_pca$x[,1])
plot(heptathlon_pca)
center <- heptathlon_pca$center
scale <- heptathlon_pca$scale
# (f) 첫번째 주성분 추출
hm <- as.matrix(heptathlon[,-score])
drop(scale(hm, center = center, scale = scale) %*% heptathlon_pca$rotation[,1])
predict(heptathlon_pca)[,1]
# (g) 두 개의 주성분을 이용한 시각화(biplot)
biplot(heptathlon_pca, col = c("gray", "black"))
# (h) 첫번째 주성분과 7종경기 점수와의 상관관계
plot(heptathlon$score, heptathlon_pca$x[,1])
cor(heptathlon$score, heptathlon_pca$x[,1])
