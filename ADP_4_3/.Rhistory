mydata<-0
mydata$v1<-rep(91:100,3)
mydata$v1<-0
mydata$v1<-rep(91:100,3)
mydata
mydata[mydata$v1==99,"v1"] <- NA # 대체 방법
mydata<-data.frame(v1=rep(91:100,3), v2=1:30)
mydata
mydata[mydata$v1==99,"v1"] <- NA # 대체 방법
mydata<-data.frame(v1=rep(100:98,3), v2=1:9)
mydata[mydata$v1==99,"v1"] <- NA # 대체 방법
mydata
library(reshape)
data(airquality)
names(airquality) <- tolower(names(airquality))
aqm <- melt(airquality, id = c("month", "day"), na.rm = TRUE)
head(aqm,2)
tail(aqm,2)
a <- cast(aqm, month ~ variable, mean)
a <- cast(aqm, month ~ variable, mean,max)
a <- cast(aqm, month ~ variable, c(mean,max))
head(a)
a <- cast(aqm, month ~ variable, c(mean,max,range))
a <- cast(aqm, month ~ variable, c(mean,max,min))
a
a <- cast(aqm, month ~ variable, c(mean,max,min,median))
a
a <- cast(aqm, month ~ variable, c(mean,max,min,median,var))
a
a <- cast(aqm, month ~ variable, c(mean,max,min,median,var,sd))
head(a)
head(french_fries)
library(sqldf)
data(french_fries ,package="reshape")
head(french_fries)
table(french_fries$treatment)
sqldf("select * from french_fries limit 6")
sqldf("select count(*) from french_fries where treatment=1")
summary(french_fries)
names(french_fries[,2])<-"oil.type"
head(french_fries)
name(french_fries[,2])<-"oil.type"
names(french_fries)[2]<-"oil.type"
head(french_fries)
sqldf("select * from french_fries limit 6")
sqldf("select count(*) from french_fries where oil_type=1")
set.seed(2020)
d <- data.frame(year = rep(2000:2002, each = 6), count = round(runif(9, 0, 20)))
d
ddply(d, "year", function(x) {
mean.count <- mean(x$count)
sd.count <- sd(x$count)
cv <- sd.count/mean.count
data.frame(cv.count = cv)
})
library(plyr)
ddply(d, "year", function(x) {
mean.count <- mean(x$count)
sd.count <- sd(x$count)
cv <- sd.count/mean.count
data.frame(cv.count = cv)
})
ddply(d, "year", summarise, mean.count = mean(count))
ddply(d, "year", transform, total.count = sum(count))
ddply(d, "year", summarise, mean.count = mean(count))
ddply(d, "year", transform, mean.count = mean(count))
data(tips,package="reshape")
head(tips)
ddply(tips, "day", function(x) {
mean.count <- mean(x$tip)
sd.count <- sd(x$tip)
cv <- sd.count/mean.count
data.frame(cv.count = cv)
})
ddply(tips, "day", summarise, mean.count = mean(count))
head(tips)
table(tips$day,count(tips$tip))
ddply(tips, .(day), function(df) count(df[,"tip"]))
ddply(tips, .(day), function(df) count(df[,"day"]))
ddply(tips, "day", function(x) {
mean.count <- mean(x$tip)
sd.count <- sd(x$tip)
cv <- sd.count/mean.count
data.frame(cv.count = cv)
})
ddply(tips, .(day), function(df) cv=mean(df[,"tip"]))/mean(df[,"tip"]))
ddply(tips, .(day), function(df) cv=mean(df[,"tip"])/mean(df[,"tip"])
)
ddply(tips, .(day), function(df) cv=mean(df[,"tip"])/sd(df[,"tip"]))
ddply(tips, .(day), cv = function(df) mean(df[,"tip"])/sd(df[,"tip"]))
ddply(tips, .(day), cv = function(df) cv=mean(df[,"tip"])/sd(df[,"tip"]))
ddply(tips, .(day), cv = function(df) cv=mean(df[,"tip"])/sd(df[,"tip"]))
ddply(tips, .(day), function(df) cv=mean(df[,"tip"])/sd(df[,"tip"]))
ddply(tips, .(day), function(df) mean(df[,"tip"])/sd(df[,"tip"]))
?ddply
ddply(tips, .(day), transform, function(df) mean(df[,"tip"])/sd(df[,"tip"]))
ddply(tips, .(day), transform, function(df) mean(df[,"tip"])/sd(df[,"tip"]))
ddply(tips, .(day), function(df) mean(df[,"tip"])/sd(df[,"tip"]))
ddply(tips, "day"", transform, function(df) mean(df[,"tip"])/sd(df[,"tip"]))
ddply(tips, "day", transform, function(df) mean(df[,"tip"])/sd(df[,"tip"]))
ddply(tips, "day", transform, function(df) mean(df$tip)/sd(df$tip))
ddply(tips, .(day), function(df) mean(df[,"tip"])/sd(df[,"tip"]))
mean(tips[tips$day=="Fri",])/sd(tips[tips$day=="Fri",])
tips[tips$day=="Fri",]
mean(tips[tips$day=="Fri","tip"])/sd(tips[tips$day=="Fri","tip"])
ddply(tips, .(day), function(df) mean(df[,"tip"])/sd(df[,"tip"]))
ddply(tips, "day", summarise, mean.count = mean(count))
ddply(tips, "day", summarise, function(df) mean.count = mean(count(df$tip)))
ddply(tips, "day", summarise, function(df) mean.tip = mean(df$tip))
ddply(tips, "day", summarise, function(df) mean.tip = mean(df[,"tip"]"))
ddply(tips, "day", summarise, function(df) mean.tip = mean(df[,"tip"]))
ddply(tips, "day", summarise, function(df) mean_tip = mean(df[,"tip"]))
ddply(tips, "day", summarise, function(df) mean(df[,"tip"]))
library(reshape)
data(tips)
library(plyr)
data(tips,package="reshape")
head(tips)
mean(tips[tips$day=="Fri","tip"])/sd(tips[tips$day=="Fri","tip"])
ddply(tips, .(day), function(df) mean(df[,"tip"])/sd(df[,"tip"]))
ddply(tips, .(day), cv=function(df) mean(df[,"tip"])/sd(df[,"tip"]))
ddply(tips, "day", function(df) mean(df[,"tip"])/sd(df[,"tip"]))
ddply(tips, "day", cv<-function(df) mean(df[,"tip"])/sd(df[,"tip"]))
ddply(tips, "day", summarise, function(df) mean(df[,"tip"]))
ddply(tips, "day", summarise, function(df) mean(df[,"tip"])/sd(df[,"tip"]))
ddply(tips, "day", function(df) mean(df[,"tip"])/sd(df[,"tip"]))
ddply(tips, "day", transform, function(df) mean(df[,"tip"])/sd(df[,"tip"]))
ddply(tips, "day", function(df$tip) mean)
ddply(tips, "day", function(df) mean(df[,"tip"]))
ddply(tips, "day", summarise, function(df) mean(df[,"tip"]))
mean(tips[tips$day=="Fri","tip"])/sd(tips[tips$day=="Fri","tip"])
ddply(tips, "day", function(df) mean(df[,"tip"]))
ddply(tips, "day", summarise, function(df) mean(df[,"tip"]))
ddply(tips, ,(day), function(df) mean(df[,"tip"]))
ddply(tips, .(day), function(df) mean(df[,"tip"]))
ddply(tips, .(day), summarise, function(df) mean(df[,"tip"]))
head(tips)
tips_day<-tips[,c(5,2)]
tips_day
mean(tips_day[tips_day$day=="Fri","tip"])/sd(tips_day[tips_day$day=="Fri","tip"])
ddply(tips_day, .(day), function(df) mean(df[,"tip"]))
mean(tips_day[tips_day$day=="Fri","tip"])/sd(tips_day[tips_day$day=="Fri","tip"])
ddply(tips_day, .(day), function(df) mean(df[,"tip"]))
mean(tips_day[tips_day$day=="Fri","tip"])
ddply(tips_day, .(day), function(df) mean(df[,"tip"]))
mean(tips_day[tips_day$day=="Fri","tip"])/sd(tips_day[tips_day$day=="Fri","tip"])
ddply(tips_day, .(day), function(df) mean(df[,"tip"])/sd(df[,"tip"]))
ddply(tips_day, summarise, .(day), function(df) mean(df[,"tip"])/sd(df[,"tip"]))
ddply(tips_day, .(day), summarise, function(df) mean(df[,"tip"])/sd(df[,"tip"]))
ddply(tips_day, .(day), function(df) mean(df[,"tip"])/sd(df[,"tip"]))
f<-function(df) mean(df[,"tip"])/sd(df[,"tip"])
ddply(tips_day, .(day), f)
ddply(tips_day, .(day), mean=f)
ddply(tips_day, .(day), m=f)
ddply(tips_day, .(day), f)
ddply(tips_day, .(day), summarise, f)
ddply(tips_day, .(day), f=function(df) mean(df[,"tip"])/sd(df[,"tip"]))
ddply(tips_day, .(day), function(df) mean(df[,"tip"])/sd(df[,"tip"]))
f<-function(df) mean(df[,"tip"])/sd(df[,"tip"])
ddply(tips_day, .(day), summarise, f)
dfx <- data.frame(
group = c(rep('A', 8), rep('B', 15), rep('C', 6)),
sex = sample(c("M", "F"), size = 29, replace = TRUE),
age = runif(n = 29, min = 18, max = 54)
)
ddply(dfx, .(group, sex), summarize,
mean = round(mean(age), 2),
sd = round(sd(age), 2))
ddply(baseball[1:100,], ~ year, nrow)
rbi <- ddply(baseball, .(year), summarise,
mean_rbi = mean(rbi, na.rm = TRUE))
rbi
ddply(baseball, .(year), transform, mean_rbi = mean(rbi, na.rm = TRUE))
?baseball
data(baseball)
?baseball
head(baseball)
data(baseball)
head(baseball)
rbi <- ddply(baseball, .(year), summarise, mean_rbi = mean(rbi, na.rm = TRUE))
head(rbi)
head(baseball)
ddply(baseball[1:100,], ~ year, nrow)
rbi <- ddply(baseball, .(year), summarise, mean_rbi = mean(rbi, na.rm = TRUE))
head(rbi)
rbi <- ddply(baseball, .(year), transform, mean_rbi = mean(rbi, na.rm = TRUE))
head(rbi)
?ddply
ddply(baseball[1:100,], ~ year, nrow)
ddply(baseball, .(year), function(df) mean(df[,6:9]))
ddply(baseball, .(year), function(df) mean(df[,6:9], na.rm = TRUE))
head(baseball)
names(baseball)
summary(baseball)
ddply(baseball, .(year), function(df) mean(df[,6:9], na.rm = TRUE))
ddply(baseball, .(lg), c("nrow", "ncol"))
ddply(baseball[1:100,], ~ year, nrow)
ddply(baseball[1:100,], .(year), nrow)
rbi_s <- ddply(baseball, .(year), summarise, mean_rbi = mean(rbi, na.rm = TRUE))
head(rbi_s)
rbi_t <- ddply(baseball, .(year), transform, mean_rbi = mean(rbi, na.rm = TRUE))
head(rbi_t)
bb_subset<-baseball[,c(1,2,5,13)]
bb_subset<-baseball[,c(1,2,5,13)]
ddply(bb_subset[1:100,], ~ year, nrow)
ddply(bb_subset[1:100,], .(year), nrow)
ddply(bb_subset, .(lg), c("nrow", "ncol"))
rbi_s <- ddply(bb_subset, .(year), summarise, mean_rbi = mean(rbi, na.rm = TRUE))
head(rbi_s)
rbi_t <- ddply(bb_subset, .(year), transform, mean_rbi = mean(rbi, na.rm = TRUE))
head(rbi_t)
head(bb_subset)
ddply(bb_subset[1:100,], ~ year, nrow)
ddply(bb_subset[1:100,], .(year), nrow)
ddply(bb_subset, .(lg), c("nrow", "ncol"))
rbi_s <- ddply(bb_subset, .(year), summarise, mean_rbi = mean(rbi, na.rm = TRUE))
head(rbi_s)
rbi_t <- ddply(bb_subset, .(year), transform, mean_rbi = mean(rbi, na.rm = TRUE))
head(rbi_t)
ddply(bb_subset[1:100,], "year", nrow)
ddply(bb_subset[1:100,], .(year), nrow)
ddply(bb_subset[1:100,], ~ year, nrow)
system.time(ddply(bb_subset, .(year), summarise, mean_rbi = mean(rbi, na.rm = TRUE)))
registerDoMC(4)
library(doMC)
registerDoMC(2)
system.time(ddply(bb_subset, .(year), summarise, mean_rbi = mean(rbi, na.rm = TRUE)))
registerDoMC(4)
system.time(ddply(bb_subset, .(year), summarise, mean_rbi = mean(rbi, na.rm = TRUE)))
registerDoMC(1)
system.time(ddply(bb_subset, .(year), summarise, mean_rbi = mean(rbi, na.rm = TRUE)))
registerDoMC(4)
system.time(ddply(bb_subset, .(year), summarise, mean_rbi = mean(rbi, na.rm = TRUE)))
require(ggplot2)
data(diamonds)
library(klaR)
data(B3)
data(iris)
iris2 <- iris[, c(1, 3, 5)]
plineplot(Species ~ ., data = iris2, method = "lda", x = iris[, 4], xlab = "Petal.Width")
data(wine,package="HDclassif")
head(wine)
wine$class<-factor(wine$class)
wine_impVar <- wine[, c("V7","V10","class")]
plineplot(class ~ ., data = wine_impVar, method = "lda", x = wine_impVar$V7, xlab = "V7")
library(tabplot)
library(klaR)
plineplot(class ~ ., data = wine_impVar, method = "lda", x = wine_impVar$V7, xlab = "V7")
plineplot(class ~ ., data = wine_impVar, method = "lda", x = wine_impVar$V10, xlab = "V10")
?cut
summary(wine$V7)
?bin
?cut
cut(rep(1,5), 4)
cut(wine$V7, 4)
cut(wine$V7, 5)
max(wine$V7)-min(wine$V7)
max(wine$V7);min(wine$V7)
breaks<-c(0,1,2,3,5.1)
wine$V7_bin<-cut(wine$V7,breaks)
table(wine$class,wine$V7_bin)
plineplot(class ~ ., data = wine_impVar, method = "lda", x = wine_impVar$V10, xlab = "V10")
plineplot(class ~ ., data = wine_impVar, method = "lda", x = wine_impVar$V7, xlab = "V7")
plineplot(class ~ ., data = wine_impVar, method = "lda", x = wine_impVar$V10, xlab = "V10")
summary(wine$V10)
V10_breaks<-c(1,2,4,6,8,13)
wine$V10_bin<-cut(wine$V10,V10_breaks)
table(wine$class,wine$V10_bin)
plineplot(class ~ ., data = wine_impVar, method = "lda", x = wine_impVar$V7, xlab = "V7")
summary(wine$V7)
V7_breaks<-c(0,1,2,3,6)
wine$V7_bin<-cut(wine$V7,V7_breaks)
table(wine$class,wine$V7_bin)
set.seed(1)
d <- data.frame(year = rep(2000:2002, each = 6), count = round(runif(9, 0, 20)))
d
library(plyr)
ddply(d, "year", function(x) {
mean.count <- mean(x$count)
sd.count <- sd(x$count)
cv <- sd.count/mean.count
data.frame(cv.count = cv)
})
ddply(d, "year", summarise, mean.count = mean(count))
ddply(d, "year", transform, total.count = sum(count))
Final4_team <- c("GER","ARG","NED","BRA",NA) # 입력
is.na(Final4_team) # 확인 방법
Final4<-data.frame(team=c("GER","ARG","NED","BRA","GER","BRA","ARG","NED"),stage=c(rep("F",2),rep("34",2),rep("QF",4)),res=c("1","0","0","3","1","7","0(2)","0(4)"))
Final4
Final4[Final4$stage=="QF","res"] <- NA # 대체 방법
Final4
mean(as.numeric(as.character(Final4$res)))
mean(as.numeric(as.character(Final4$res)), na.rm=T)
Final4[!complete.cases(Final4),]
na.omit(Final4)
Final4
library(doParallel)
library(reshape)
data(tips)
head(tips)
tips$no<-1:nrow(tips)
# melt
tips_melt <- melt(tips, id = c("no","sex","smoker","day","time"), na.rm = TRUE)
head(tips_melt,2)
tail(tips_melt,2)
str(tips_melt)
table(tips_melt$variable)
# cast
tips_cast_time <- cast(tips_melt, time ~ variable, mean)
tips_cast_time
cast(tips_melt, time ~ variable, c(mean,length))
cast(tips_melt, day ~ variable ~ time,c(mean, length))
cast(tips_melt, day ~ . |variable, mean)
cast(tips_melt, day ~ variable, mean, margins=c("grand_row", "grand_col"))
cast(tips_melt, day ~ time, mean, subset=variable=="tip")
cast(tips_melt, day ~ variable, range)
############
# 7. sqldf #
############
# install.packages("sqldf")
library(sqldf)
data(french_fries ,package="reshape")
head(french_fries)
table(french_fries$treatment)
sqldf("select * from french_fries limit 6")
sqldf("select count(*) from french_fries where treatment=1")
names(french_fries)[2]<-"oil.type"
head(french_fries)
sqldf("select * from french_fries limit 6")
sqldf("select count(*) from french_fries where oil_type=1")
####################
# 8. plyr #
####################
# install.packages("plyr")
library(plyr)
data(baseball)
head(baseball)
bb_subset<-baseball[,c(1,2,5,13)]
head(bb_subset)
ddply(bb_subset[1:100,], ~ year, nrow)
ddply(bb_subset[1:100,], .(year), nrow)
ddply(bb_subset[1:100,], "year", nrow)
ddply(bb_subset, .(lg), c("nrow", "ncol"))
rbi_s <- ddply(bb_subset, .(year), summarise, mean_rbi = mean(rbi, na.rm = TRUE))
head(rbi_s)
rbi_t <- ddply(bb_subset, .(year), transform, mean_rbi = mean(rbi, na.rm = TRUE))
head(rbi_t)
##################
# 10. Data Table #
##################
# install.packages("data.table")
library(data.table)
Final4<-data.table(team=c("GER","ARG","NED","BRA","GER","BRA","ARG","NED"),
stage=c(rep("F",2),rep("34",2),rep("QF",4)),
res=rep(c(1,0),4),
score=c("1","0","0","3","7","1","0(4)","0(2)"))
Final4
data(wine,package="HDclassif")
head(wine)
dt_wine <- data.table(wine)
head(dt_wine)
# 둘 간의 차이
tables()
sapply(dt_wine,class)
sapply(Final4,class)
Final4
Final4[1,]   # 1번째 행 조회
Final4[Final4$team=="GER",]   # team값이 "GER"인 데이터 조회
# data table에 key를 지정해서 해당 값으로 조회
setkey(Final4,team)
Final4 # team에 의해 ordering되어 있음.
tables()
# “GER”가 들어간 모든 데이터, 첫번째 결과, 마지막 결과, 모든 결과
Final4["GER",]
Final4["GER",mult="first"]
Final4["GER",mult="last"]
# 검색조건 다음에 “,”는 선택사항
Final4["GER"]
data(tips,package="reshape")
head(tips) # 최초 6 row 조회
## (2) Summary
summary(tips)
## (3) tabplot
library(tabplot)
tableplot(tips, cex=1.8)
#################
# 2. 변수중요도 #
#################
## (2) klaR 패키지의 greedy.wilks
library(klaR)
data(wine,package="HDclassif")
head(wine)
wine$class<-factor(wine$class)
gw_obj <- greedy.wilks(class ~ ., data = wine, niveau = 0.1)
gw_obj
## (3) klaR 패키지의 plineplot
wine_impVar <- wine[, c("V7","V10","class")]
plineplot(class ~ ., data = wine_impVar, method = "lda", x = wine_impVar$V7, xlab = "V7")
summary(wine$V7)
V7_breaks<-c(0,1,2,3,6)
wine$V7_bin<-cut(wine$V7,V7_breaks)
table(wine$class,wine$V7_bin)
plineplot(class ~ ., data = wine_impVar, method = "lda", x = wine_impVar$V10, xlab = "V10")
summary(wine$V10)
V10_breaks<-c(1,2,4,6,8,13)
wine$V10_bin<-cut(wine$V10,V10_breaks)
table(wine$class,wine$V10_bin)
## (4) klaR 패키지의 NaiveBayes
mN <- NaiveBayes(class ~ ., data = wine[,c(1,8,11,14,2)])
par(mfrow=c(2,2))
plot(mN)
## (5) Binning
library(party)
data(wine,package="HDclassif")
wine$class<-factor(wine$class)
summary(wine$V7)
wine$V7_c <- cut(wine$V7,10)
wine_ctr<-ctree(class ~.,data=wine)
plot(wine_ctr)
wine_ctr
#==============================#
# 03. 기초 분석 및 데이터 관리 #
#==============================#
#####################################
# 2. Missing Data 확인 및 제외 방법 #
#####################################
Final4_team <- c("GER","ARG","NED","BRA",NA) # 입력
is.na(Final4_team) # 확인 방법
Final4<-data.frame(team=c("GER","ARG","NED","BRA","GER","BRA","ARG","NED"),stage=c(rep("F",2),rep("34",2),rep("QF",4)),res=c("1","0","0","3","1","7","0(2)","0(4)"))
Final4
Final4[Final4$stage=="QF","res"] <- NA # 대체 방법
Final4
mean(as.numeric(as.character(Final4$res)))
mean(as.numeric(as.character(Final4$res)), na.rm=T)
Final4[!complete.cases(Final4),]
########################################
# 3. Amelia를 이용한 Missing Data 처리 #
########################################
# install.packages("Amelia")
library(Amelia)
data(africa)
head(africa)
# trade에 5개의 NA 존재
summary(africa)
# 변수들의 관계를 이용한 imputation
a.out <- amelia(africa, m = 3, ts = "year", cs = "country")
# imputation 전
missmap(a.out)
# imputation 후
africa$trade <- a.out$imputation[[3]]$trade
missmap(africa)
########################
# 4. Outlier Detection #
########################
## (6) outlier가 있는 row를 파악할 수 있는 방법
library(DMwR)
data(wine,package="HDclassif")
head(wine)
wine_od <- wine[,c(8,11,14,2)]
outlier.scores <- lofactor(wine_od, k = 5)
plot(density(outlier.scores))
outliers <- order(outlier.scores, decreasing = T)[1:5]
print(outliers)
summary(wine_od)
n <- nrow(wine_od)
labels <- 1:n
labels[-outliers] <- "."
biplot(prcomp(wine_od), cex = 0.8, xlabs = labels)
pch <- rep(".", n)
pch[outliers] <- "+"
col <- rep("black", n)
col[outliers] <- "red"
pairs(wine_od, pch = pch, col = col)
install.packages("doMC")
library(doMC)
registerDoMC(cores=3)
